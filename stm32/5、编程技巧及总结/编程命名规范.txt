变量：
{
	整体采用小驼峰命名法:及第一个字母小写 第二各单词的首字母大写S
	1、全局变量命名:
	{
		1> 变量应以g开头表明其为全局作用于global 
		2> 必须使用形容词+名词，或者动词+名词的组合形式。
		如：当前时间 - g_currentTime
	}
	2、局部变量命名:
	{
		1> 函数内部局部变量直接采用小驼峰命名
		2> 必须使用形容词+名词，或者动词+名词的组合形式。
		如：当前温度 - currentTemp;
		
		静态变量:
		1> 必须加s开头, 其他同上
		如:当前温度 - s_currentTemp;
	}

	指针变量
	{
		1> 指针变量应该采用p开头
		2> 表明指向数据的共性 如：当时温度 则pTemp; 
	}
	宏
	{
		1> 所有的宏变量必须采用全大写，各形容词和名词之间采用_连接
		2> 全局宏应该放在.h文件  局部宏应该放在.c文件 同时尾部进行endef
	}
}

函数：
{
	函数名：驼峰命名。必须采用动词+名词的组合形式。
	如：获取变量 - get_value(各词之间下滑线分割)

	1> 全局函数命名：非static 开头
	2> 局部函数命名：以static 开头
	3> 函数应尽量返回调用状态
}

枚举类型
{
	同一采用大写加下划线,同宏定义, 要求表明功能
	如: 延迟 -DELAY
}

结构体类型
{
	全部后缀加TypeDef; 如Comm_GatherTypeDef; 表明通讯基本类型定义
}



调用约定：
{
	1> 一些参数的获取使用函数返回(可以表明参数的含义)
}


心得：190320
{
   1、对于全局的变量以g_开头，对于全局变量的访问全部采用函数来实现, 全局变量的定义可以专门创建
       一个global.c来存放,定义存放咋global.h中,如
       uint8_t g_temp_flag;
       获取函数: uint8_t get_temp_flag(void);
       设置函数: void set_temp_flag(uint8_t flag);
       关于uint8_t的定义放在global.h中。
   2、推荐层次化编程模型。即对于一个硬件驱动实现2个.c和.h模型。
      如HardWare层按键底层驱动: bsp_key.c    Midder层封装bsp_key.c细节: api_key.c,对上承接
      app应用，对下隐藏硬件接口
      {
         应用的架构:
         {
            app:    应用层逻辑代码
                global.c公共应用接口
                sysConfig.h 系统配置层
            std_lib: 标准库代码
            midder: 中间层代码(实现底层的硬件接口封装)
            hardWare: 底层硬件驱动层
            usr_lib: 用户库代码(比如实现一个队列的数据结构什么的)
         }
      }    
}